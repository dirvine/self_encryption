name: Build and Publish self_encryption Python Package

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.10"
  PACKAGE_NAME: "self_encryption"

# Add top-level permissions block
permissions:
  id-token: write
  contents: read

jobs:
  macos:
    runs-on: macos-latest
    # Add permissions to job
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  windows:
    runs-on: windows-latest
    # Add permissions to job
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -i python${{ matrix.python-version }}
      - name: Debug dist directory
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Full path of dist directory:"
          pwd
          echo "Total files in dist:"
          find dist -type f | wc -l
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist/*
          if-no-files-found: error

  musllinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_PYTHON_VERSION: ${{ matrix.python-version }}
          PYO3_CROSS: "1"
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist -i python${{ matrix.python-version }}
      - name: Install built wheel
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            # Install system dependencies
            apk add --no-cache \
              python3 \
              py3-pip \
              gcc \
              musl-dev \
              python3-dev \
              rust \
              cargo \
              openssl-dev \
              pkgconfig

            # Create and activate virtual environment
            python3 -m venv /venv
            . /venv/bin/activate

            # Install Python dependencies
            pip install --upgrade pip wheel setuptools
            pip install pytest click>=8.0.0

            # Install in development mode
            cd /io
            pip install -e .

            # Run tests
            python -m pytest -v
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    # Add permissions to job
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist-py${{ env.PYTHON_VERSION }}
          path: dist/*.tar.gz
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, musllinux, sdist]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create dist directory
        run: mkdir -p dist
      
      # Download each type of artifact explicitly
      - uses: actions/download-artifact@v3
        with:
          path: downloaded
          
      - name: Debug downloaded artifacts
        run: |
          echo "Contents of downloaded directory:"
          ls -R downloaded/
          
      - name: Prepare artifacts for release
        run: |
          # Move all wheels and tarballs to dist directory
          find downloaded -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp -v {} dist/ \;
          
          echo "Final contents of dist directory:"
          ls -la dist/
          
          echo "Number of distribution files:"
          find dist/ -type f | wc -l
          
          if [ $(find dist/ -type f | wc -l) -eq 0 ]; then
            echo "Error: No distribution files found!"
            exit 1
          fi
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true